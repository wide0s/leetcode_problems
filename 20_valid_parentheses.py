class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if len(s) % 2 != 0:
            return False
        twins = { '}': '{', ']': '[', ')' : '('}
        expression = []
        for ch in s:
            if len(expression) > 0 and (ch in twins and expression[-1] == twins[ch]):
                expression.pop()
            else:
                expression.append(ch)
        return True if len(expression) == 0 else False

vectors = [
        "((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", True,
        '){', False,
        '(){}}{', False,
        '[([]])', False
        ]

for i in range(0, len(vectors), 2):
    s = vectors[i]
    expected = vectors[i + 1]
    print(f'{s} {expected}')
    returned = Solution().isValid(s)
    assert expected == returned, f'for {s} expected {expected}, returned {returned}!'
