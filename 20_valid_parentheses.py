from timeit import default_timer as timer


class Solution(object):
    def isValid3(self, s):
        if len(s) % 2 != 0:
            return False
        tab = [''] * len(s)
        num = 0
        for c in s:
            if num > 0 and ((c == ')' and tab[num - 1] == '(') or (c == ']' and tab[num - 1] == '[') or (c == '}' and tab[num - 1] == '{')):
                #tab[num] = ''
                num -= 1
            else:
                tab[num] = c
                num += 1
        return True if num == 0 else False

    def isValid2(self, s):
        if len(s) % 2 != 0:
            return False

        tab = [] 
        for c in s:
            if len(tab) > 0 and ((c == ')' and tab[-1] == '(') or (c == ']' and tab[-1] == '[') or (c == '}' and tab[-1] == '{')):
                x = tab.pop()
            else:
                tab.append(c)
        return True if len(tab) == 0 else False

    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if len(s) % 2 != 0:
            return False
        m = { '}': '{', ']': '[', ')' : '('}
        expression = []
        for c in s:
            if len(expression) > 0 and (c in m and expression[-1] == m[c]):
                expression.pop()
            else:
                expression.append(c)
        #print(tab)
        return True if len(expression) == 0 else False
# {}[()] -> {]})[(
# [()]   -> []()
# {}[]() -> {)}([], ]()]{}
# {}[]()() -> {)}([)](, ()()[]{}

# ((, ([, ({, )), ]), })
# [[, [{, [(, ]], }], )]
# {[, {(, {{, ]}, )}, }}

# (}, (], [), [}, {), {] -- bad combinations

test = "((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}((([][][][{{{}}}]{{}}([])))){}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"

start = timer()
assert Solution().isValid(test) == True
end = timer()
print(end - start)

start = timer()
assert Solution().isValid2(test) == True
end = timer()
print(end - start)

start = timer()
assert Solution().isValid3(test) == True
end = timer()
print(end - start)



#assert Solution().isValid("{[]}")
#assert Solution().isValid("){") == False
#assert Solution().isValid("(){}}{") == False
#assert Solution().isValid("[([]])") == False
