class Solution(object):
    def numRescueBoats(self, people, limit):
        """
        :type people: List[int]
        :type limit: int
        :rtype: int
        """
        if people is None or len(people) == 0:
            return 0

        weights = sorted(people)
        if len(weights) == 1 or weights[0] >= limit:
            return len(weights)

        boats = 0
        i = 0
        j = len(weights) - 1
        while i <= j:
            boats += 1
            if weights[i] + weights[j] <= limit:
                i += 1
            j -= 1
        return boats

vectors = [
        [1,2], 3, 1,
        [3,2,2,1], 3, 3,
        [3,5,3,4], 5, 4,
        [3,2,3,2,2], 6, 3,
        [7819,1519,23125,14509,1629,4123,21075,29557,28139,28848,\
                13689,19768,2512,17644,22131,26929,2479,12416,8147,3462,\
                7032,24017,16654,16425,6922,24768,14537,25036,13152,53,\
                6801,18267,5006,14535,17943,11720,857, 1860, 24286,14851,\
                2857,6151,9639,1657,18210,15023,23336,14297,16335,24118,\
                24811,9791,2931,26926,23127,589,1801,25908,12099,164, \
                16978,29888,29501,7327,22145,5565,24588,18451,24504,20623,\
                24940,4125,8109,5605,3712,6661,2502,13479,10356,267,\
                5866,21069,1303,558,25696,27451,1109,7796,10752,17429,\
                18817,28932,8112,12048,11286,25157,5795,27278,19862,14676,\
                21585,5902,1322,25963,10700,26203,18702,17463,26478,9116,\
                11496,2534427223,23573,27568,16513,5199,25447,26499,9126,\
                20004,565,27783,10414,16918,20524,24703,21209,9811,27919,\
                6688,22407,15213,7604,15383,9448,15626,6257,7933,7339,\
                25848,11746,25707,11363,9614,19923,12137,24561,19415,20994,\
                29094,25348,10249,13782,25980,26783,16167,16371,2499,6383,\
                3550,9759,478,15232,18,10791,3064,7295,19924,7935,\
                174,24767,16171,26477,8057,9594,926,15228,26843,54,\
                17326,7210,20606,27764,14531,26302,11571,6531,12681,19758,\
                24070,20309,2156,23864,3976,3452,6371,5227,5795,6016,\
                16059,25809,15762,19722,23469,29703,8229,28261,5867,5784,\
                23876,2369, 27036,27093,21064,20898,14387,2123,10375,22822,\
                17631,9176,5166,6320,16025,21001,28328,23419,21183,18984,\
                29940,18285,23449,12063,4181,11016,23770,15243,14867,6241,\
                10873,22481,12516,5270,28764,27992,25817,14678,29601,2140,\
                19648,964,10334,16796,14489,13093,28121,26501,26718,23402,\
                6047,19837,11099,26665,10332,17903,24808,9866,3639,10706,\
                8112,10532,29302,25785,17537,25196,15163,27937,7598,27026,\
                16923,3328,14196,9431,6643,23608,5050,18759,16607,16439,\
                5614,21038,14197,16742,27850,29809,18291,15070,29332,994,\
                4933,21145,9431,14932,18687,12098,17732,9535,4794,19141,\
                4892,5064,25496,23263,2997,22092,24692,24766,18691,16139,\
                18291,9612,17404,23690,13337,3255,25168,8774,13258,19752,\
                24108,19196,11583,3190,29029,14925,13252,22870,22237,21134,\
                29392,24968,18837,3846,24902,15471,17549,16708,6665,16701,\
                14095,26913,28232,29490,15880,8738,2833,639,8295,1186,\
                21527,14341,24594,25012,14180,14455,15905,19653,14279,28796,\
                8267,1143,29158,2630,5642,8217,25229,9485,19677,25389,\
                16299,6842,15401,687,10985,5406,12065,1804,20103,20679,\
                24202,17877,3700,4368,29527,20874,19874,14622,9712,25503,\
                28191,7492,10314,9551,29552,17278,22273,10006,9801,22346,\
                24459,4289,26263,19552,9117,5864,28403,15654,13176,9174,\
                19809,268,27341,18487,19,1851,17999,7217,9943,26206,\
                23598,15463,26304,17452,8408,29281,1780,2070,26882,16526,\
                26287,23802,21978,28681,10338,18773,27184,7380,183,16370,\
                12834,11925,11541,20281,15800,13256,20365,10769,14710,10040,\
                15830,27182,3035,18732,5388,27699,24634,12152,28590,1726,\
                18287,10622,23713,29846,8723,18474,19579,9382,8953,3036,\
                28379,14823,21043,23595,8036,5836,11191,18296,15863,3465,\
                29487,29675,25445,5108,12577,24184,29649,18496,5341,27129,\
                8878,24455,19814,10338,18216,11276,18031,23486,21546,17456,\
                21582,24106,11329,6155,20734,6255,19746,22102,10119,6844,\
                22449,29254,22612,26156,14302,7489,3288,4496,8141,23463,\
                3862,29958,1258,17090,17260,15049,4980,13937,25443,7707,\
                11063,9172,11708,18367,15667,28726,14075,9130,546,8808,\
                24962,29870,17177,14474,11587,9952,10502,24271,10350,17291,\
                4282,26405,9215,13724,7541,4933,28175,21112,27829,1219,16576,\
                17989,28924,21494,19004,8047,26871,17739,30,19184,25809,\
                2965,5763,16317,1256,11626,17343,7376,25526,2974,24051,\
                6284,25025,19665,22382,15587,24640,4861,22615,583,7530,\
                2558,13562,8288,26474,1220,22864,26311,18591,5917,52,\
                2584,24814,19277,27175,20901,3244,19269,9472,18790,5384,\
                23897,21140,15748,18083,12961,15399,15271,10038,8137,11455,\
                3282,5,22630,26212,10339,8833,22204,26579,1409,5478,\
                2965,10767,24957,1043,9951,28209,17173,9507,26024,22626,\
                1642,26498,27539,14996,18845,12118,10272,18928,23155,13451,\
                16292,4097,10265,13324,26764,18330,10695,24140,7182,17427,\
                28331,389,17340,23190,16314,7390,26047,18222,12502,13231,\
                26529,20231,29693,20140,3233,14796,19089,473,4672,19354,\
                1567,21263,4028,13019,23907,19126,6137,16797,21467,6260,\
                2017,4624,23398,5975,23408,28680,21197,24203,23544,21970,\
                20830,279,13857,12011,23469,23023,13180,21899,5241,25844,\
                2226,13932,9728,25120,11593,3528,20616,5459,27312,21823,\
                22195,9349,28616,12384,8014,19609,24733,28118,12473,22174,\
                2637,27810,277,16245,8901,11704,13249,14881,24248,14300,\
                15160,811,10879,24614,9236,26358,12926,8334,3801,7261,\
                18363,6135,29220,26004,14850,28605,1642,19744,14151,1332,\
                20925,18518,20615,6845,2316,7245,12723,19785,21726,9128,\
                24768,19068,6421,29231,27271,23900,17139,8806,4420,7652,\
                16414,12505,7361,20329,15236,4078,8250,10802,7924,28263,\
                6569,24326,547,18104,2255,8076,29667,912,11365,13208,\
                11240,21260,23225,21754,7814,16202,25401,10176,8716,22010,\
                100,21531,11267,24451,26557,14953,14394,10982,23868,4740,\
                11847,7352,3181,22824,26490,23508,6024,8256,17911,7746,9077,\
                15579,24045,17969,28993,10037,23666,17071,6016,3498,14936,\
                6078,11830,1290,13037,11407,13911,24345,19309,9811,649,\
                4271,15138,26435,13780,12611,15190,3917,24020,14720,2204,\
                27388,2054,856,78,16357,9742,1965,1359,14106,2121,5995,\
                22269,9275,882,28743,28003,19130,22805,27776,10314,18781,\
                29273,1850,25843,13563,27516,11299,1296,15473,27902,16525,\
                7237,20377,16618,16601,7169,6614,328,29070,22535,27028,13584,\
                7096,14184,29238,26133,21885,20363,12891,17179,22792,7200,\
                2010,22027,14505,19846,8654,21253,25923,18114,163,24455,6743,\
                14012,2678,11901,26795,14905,21427,13532,14858,8246,20305,\
                6070,27121,25241,7602,15387,28623,25614,3166,12240,11314,\
                26381,28848,23154,19278,7957,7939,13377,12261,21173,12537,\
                26583,3071,4472,22922,26429,15920,16671,17418,24312,25262,\
                9534,12000,21768,20750,15777,9008,20921,23214,20380,27477,\
                903,7440,6061,6206,1265,19391,17612,5572,16498,8374,23935,\
                20811,14799,20657,26464], 29999, 517
        ]

for i in range(0, len(vectors), 3):
    people = vectors[i]
    limit = vectors[i + 1]
    print(f'{people}, tonnage {limit}')
    expected = vectors[i + 2]
    returned = Solution().numRescueBoats(people, limit)
    assert expected == returned, f'for {people} and limit {limit} expected boats {expected}, but returned {returned}!'
